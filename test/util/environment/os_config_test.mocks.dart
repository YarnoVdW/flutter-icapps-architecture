// Mocks generated by Mockito 5.4.4 from annotations
// in icapps_architecture/test/util/environment/os_config_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:device_info_plus/device_info_plus.dart' as _i9;
import 'package:device_info_plus/src/model/android_device_info.dart' as _i2;
import 'package:device_info_plus/src/model/ios_device_info.dart' as _i3;
import 'package:device_info_plus/src/model/linux_device_info.dart' as _i4;
import 'package:device_info_plus/src/model/macos_device_info.dart' as _i6;
import 'package:device_info_plus/src/model/web_browser_info.dart' as _i5;
import 'package:device_info_plus/src/model/windows_device_info.dart' as _i7;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAndroidDeviceInfo_0 extends _i1.SmartFake
    implements _i2.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_1 extends _i1.SmartFake implements _i3.IosDeviceInfo {
  _FakeIosDeviceInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxDeviceInfo_2 extends _i1.SmartFake
    implements _i4.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebBrowserInfo_3 extends _i1.SmartFake
    implements _i5.WebBrowserInfo {
  _FakeWebBrowserInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsDeviceInfo_4 extends _i1.SmartFake
    implements _i6.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsDeviceInfo_5 extends _i1.SmartFake
    implements _i7.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseDeviceInfo_6 extends _i1.SmartFake
    implements _i8.BaseDeviceInfo {
  _FakeBaseDeviceInfo_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i9.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue:
            _i10.Future<_i2.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_0(
          this,
          Invocation.getter(#androidInfo),
        )),
      ) as _i10.Future<_i2.AndroidDeviceInfo>);

  @override
  _i10.Future<_i3.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue: _i10.Future<_i3.IosDeviceInfo>.value(_FakeIosDeviceInfo_1(
          this,
          Invocation.getter(#iosInfo),
        )),
      ) as _i10.Future<_i3.IosDeviceInfo>);

  @override
  _i10.Future<_i4.LinuxDeviceInfo> get linuxInfo => (super.noSuchMethod(
        Invocation.getter(#linuxInfo),
        returnValue:
            _i10.Future<_i4.LinuxDeviceInfo>.value(_FakeLinuxDeviceInfo_2(
          this,
          Invocation.getter(#linuxInfo),
        )),
      ) as _i10.Future<_i4.LinuxDeviceInfo>);

  @override
  _i10.Future<_i5.WebBrowserInfo> get webBrowserInfo => (super.noSuchMethod(
        Invocation.getter(#webBrowserInfo),
        returnValue:
            _i10.Future<_i5.WebBrowserInfo>.value(_FakeWebBrowserInfo_3(
          this,
          Invocation.getter(#webBrowserInfo),
        )),
      ) as _i10.Future<_i5.WebBrowserInfo>);

  @override
  _i10.Future<_i6.MacOsDeviceInfo> get macOsInfo => (super.noSuchMethod(
        Invocation.getter(#macOsInfo),
        returnValue:
            _i10.Future<_i6.MacOsDeviceInfo>.value(_FakeMacOsDeviceInfo_4(
          this,
          Invocation.getter(#macOsInfo),
        )),
      ) as _i10.Future<_i6.MacOsDeviceInfo>);

  @override
  _i10.Future<_i7.WindowsDeviceInfo> get windowsInfo => (super.noSuchMethod(
        Invocation.getter(#windowsInfo),
        returnValue:
            _i10.Future<_i7.WindowsDeviceInfo>.value(_FakeWindowsDeviceInfo_5(
          this,
          Invocation.getter(#windowsInfo),
        )),
      ) as _i10.Future<_i7.WindowsDeviceInfo>);

  @override
  _i10.Future<_i8.BaseDeviceInfo> get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue:
            _i10.Future<_i8.BaseDeviceInfo>.value(_FakeBaseDeviceInfo_6(
          this,
          Invocation.getter(#deviceInfo),
        )),
      ) as _i10.Future<_i8.BaseDeviceInfo>);
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i2.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get codename => (super.noSuchMethod(
        Invocation.getter(#codename),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#codename),
        ),
      ) as String);

  @override
  String get incremental => (super.noSuchMethod(
        Invocation.getter(#incremental),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#incremental),
        ),
      ) as String);

  @override
  String get release => (super.noSuchMethod(
        Invocation.getter(#release),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#release),
        ),
      ) as String);

  @override
  int get sdkInt => (super.noSuchMethod(
        Invocation.getter(#sdkInt),
        returnValue: 0,
      ) as int);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [IosUtsname].
///
/// See the documentation for Mockito's code generation for more information.
class MockIosUtsname extends _i1.Mock implements _i3.IosUtsname {
  MockIosUtsname() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get sysname => (super.noSuchMethod(
        Invocation.getter(#sysname),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#sysname),
        ),
      ) as String);

  @override
  String get nodename => (super.noSuchMethod(
        Invocation.getter(#nodename),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#nodename),
        ),
      ) as String);

  @override
  String get release => (super.noSuchMethod(
        Invocation.getter(#release),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#release),
        ),
      ) as String);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  String get machine => (super.noSuchMethod(
        Invocation.getter(#machine),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#machine),
        ),
      ) as String);
}

/// A class which mocks [AndroidDisplayMetrics].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDisplayMetrics extends _i1.Mock
    implements _i2.AndroidDisplayMetrics {
  MockAndroidDisplayMetrics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get widthPx => (super.noSuchMethod(
        Invocation.getter(#widthPx),
        returnValue: 0.0,
      ) as double);

  @override
  double get heightPx => (super.noSuchMethod(
        Invocation.getter(#heightPx),
        returnValue: 0.0,
      ) as double);

  @override
  double get xDpi => (super.noSuchMethod(
        Invocation.getter(#xDpi),
        returnValue: 0.0,
      ) as double);

  @override
  double get yDpi => (super.noSuchMethod(
        Invocation.getter(#yDpi),
        returnValue: 0.0,
      ) as double);

  @override
  double get widthInches => (super.noSuchMethod(
        Invocation.getter(#widthInches),
        returnValue: 0.0,
      ) as double);

  @override
  double get heightInches => (super.noSuchMethod(
        Invocation.getter(#heightInches),
        returnValue: 0.0,
      ) as double);

  @override
  double get sizeInches => (super.noSuchMethod(
        Invocation.getter(#sizeInches),
        returnValue: 0.0,
      ) as double);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
